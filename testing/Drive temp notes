///////////////////////////////
/*

//--------------------------------
// *** Drive Temperatures ***
//--------------------------------

//a struct (like a multi field object) for the drives, leaves room for more later
type drive struct{
	var temp int
}

// Creates a Cmd type (subtype struct) (golang.org/pkg/os/exec) that holds the
var smartctl := exec.Command("/usr/local/sbin/smartctl", "--scan | awk '{print$1}")


//--------------------------------
// *** Structs and Functions ***
//--------------------------------


//Uses the smartctl method to collect and return a slice of structs containing the drive information.
func getDrives() *[]drive {
	drives := smartctl.Run()
	return drives
}

/*
#############################
# Drive temperatures:
#############################

for drive in $drives; do (
  serial=$("$smartctl" -i "$drive" | grep "Serial Number" | awk '{print $3}')
  capacity=$("$smartctl" -i "$drive" | grep "User Capacity" | awk '{print $5 $6}')
  temp=$("$smartctl" -A "$drive" | grep "194 Temperature" | awk '{print $10}')
  if [ -z "$temp" ]; then
    temp=$("$smartctl" -A "$drive" | grep "190 Airflow_Temperature" | awk '{print $10}')
  fi
  if [ -z "$temp" ]; then
    temp="-n/a-"
  else
    temp="${temp}C"
  fi
  dfamily=$("$smartctl" -i "$drive" | grep "Model Family" | awk '{print $3, $4, $5, $6, $7}' | sed -e 's/[[:space:]]*$//')
  dmodel=$("$smartctl" -i "$drive" | grep "Device Model" | awk '{print $3, $4, $5, $6, $7}' | sed -e 's/[[:space:]]*$//')
  if [ -z "$dfamily" ]; then
    dinfo="$dmodel"
  else
    dinfo="$dfamily ($dmodel)"
  fi
  printf '%6.6s: %5s %-8s %-20.20s %s\n' "$(basename "$drive")" "$temp" "$capacity" "$serial" "$dinfo"
) >> ${logfile}
done
*/
//End of the Shell Script