package main

import (
	"fmt"     //General printing for error catching and testing
	"os/exec" //for using external processes - IPMI and smartctl calls
	"strconv" //to convert a string to a float or int
	"strings" //to trim a string of spaces

	"github.com/prometheus/client_golang/prometheus" //Prometheus files
	"github.com/prometheus/common/log"               //other Prometheus files, specifically for logging
)

//a struct (like a multi field object) for the CPUs, leaves room for more later
type cpuCollector struct {
	temp *prometheus.Desc
}

//get the # of CPU cores and their temperatures and put them in a cpu struct, then return a slice of these structs
func getCPUtemps() (out []float64) {

	// IPMI Variables/Settings
	ipmiHost := "192.168.1.60" // IP address or DNS-resolvable hostname of IPMI server:
	ipmiUser := "ADMIN"        // IPMI username
	// IPMI password file. This is a file containing the IPMI user's password
	// on a single line and should have 0600 permissions:
	ipmiPWFile := "/root/ipmi_password" //just the file location

	//define the command to get the number of CPUs and then use it
	numCPUCmd := exec.Command("/usr/local/bin/ipmitool", "-I lanplus -H", ipmiHost, "-U", ipmiUser, "-f", ipmiPWFile, "sdr elist all | grep -c -i \"cpu.*temp\"")
	//prints the command path and args as a check
	fmt.Println("Command Path:", numCPUCmd.Path)
	fmt.Println("Command Args:", numCPUCmd.Args)

	numCPUBytes, err := numCPUCmd.Output() //returns a slice of bytes and an error

	//error check
	if err != nil {
		log.Error(err)
	}

	/*See the testing/freenas_exporter_t.go for a broken down version
	1. This converts the []bytes to a string
	2. Trims the space from that string (generated by grep)
	3. Then it parses an int from the string.  Later I will use the float version for the temperatures.
	*/
	numCPU, _ := strconv.Atoi(strings.TrimSpace(string(numCPUBytes)))
	fmt.Println("The number of CPUs reported by the pull from IPMI:", numCPU) //error checking

	//go through each CPU and get the temperature
	if numCPU == 1 {
		//define the command used to get the CPU temperature
		tempCmd := exec.Command("/usr/local/bin/ipmitool", "-I lanplus -H", ipmiHost, "-U", ipmiUser, "-f", ipmiPWFile, "sdr elist all | grep \"CPU Temp\" | awk '{print $10}'")

		//prints the command path and args as a check
		fmt.Println("Command Path:", tempCmd.Path)
		fmt.Println("Command Args:", tempCmd.Args)

		tempFloat, err := strconv.ParseFloat(strings.TrimSpace(string(numCPUBytes)), 64)

		//error check
		if err != nil {
			log.Error(err)
		}

		out = append(out, tempFloat)
		fmt.Println("Single entry slice of float", out) //error checking
	} else {
		for i := 1; i < numCPU+1; i++ {
			tempCmd := exec.Command("/usr/local/bin/ipmitool", " -I lanplus -H ", ipmiHost, " -U ", ipmiUser, " -f ", ipmiPWFile, " sdr elist all | grep 'CPU", string(i), " Temp' | awk '{print $10}'")
			//prints the command path and args as a check
			fmt.Println("Command Path:", tempCmd.Path)
			fmt.Println("Command Args:", tempCmd.Args)

			tempFloat, err := strconv.ParseFloat(strings.TrimSpace(string(numCPUBytes)), 64)

			//error check
			if err != nil {
				log.Error(err)
			}

			out = append(out, tempFloat)
			fmt.Println("Slice of float 64s:", out) //error checking
		}
	}
	fmt.Println("Final slice being returned:", out) //error checking
	return out                                      // returns the slice of float64s
}

//You must create a constructor for you collector that
//initializes every descriptor and returns a pointer to the collector
func newCPUCollector() *cpuCollector {
	return &cpuCollector{
		temp: prometheus.NewDesc("cpu_temp_celcius",
			"Displays the current CPU temperatures in Celcius",
			nil, nil,
		),
	}
}

//Each and every collector must implement the Describe function.
//It essentially writes all descriptors to the prometheus desc channel.
func (collector *cpuCollector) Describe(ch chan<- *prometheus.Desc) {
	//Update this section with the each metric you create for a given collector
	ch <- collector.temp
}

//Collect implements required collect function for all promehteus collectors
func (collector *cpuCollector) Collect(ch chan<- prometheus.Metric) {

	//Implement logic here to determine proper metric value to return to prometheus
	//for each descriptor or call other functions that do so.

	//gathers the slice of cpuCollector structs, each with a temp *prometheus.Desc
	cpuTemps := getCPUtemps()

	for num, temp := range cpuTemps {
		ch <- prometheus.MustNewConstMetric(collector.temp, prometheus.GaugeValue, temp, string(num))
	}
}
